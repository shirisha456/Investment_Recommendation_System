# -*- coding: utf-8 -*-
"""Investment Recommendation System (Shirisha Gujja)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IvyGL-2069oITcgjmtjIkLJpLvPoQNd9?authuser=1
"""

import pandas_datareader as pdr
# !pip install yfinance
import yfinance as yf
import datetime as dt
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import MinMaxScaler

user_input = input("Enter Stock Symbol: ")

if not user_input:
  symbol = 'WIPRO.NS'         # Taken as an example
else:
  symbol = user_input

try:
    df = yf.download(symbol, start='2013-01-01', end='2021-05-29')
    
except:
    print("Stock Symbol is Invalid.")
    exit()

df.to_csv("data_prediction.csv")

df1 = df.reset_index()['Close']
plt.title("Original Statistics for "+str(symbol))
plt.plot(df1)         # X-axis: Days |||| Y-axis: Price

df1.shape

# LSTM is sensitive to scale of data. Hence, we apply MinMax scalar here.
scaler=MinMaxScaler(feature_range=(0,1))
df1=scaler.fit_transform(np.array(df1).reshape(-1,1))

df1.shape       # Got transformed and converted to array

# print(df1)
##splitting dataset into train and test split
training_size=int(len(df1)*0.65)
test_size=len(df1)-training_size
train_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]

training_size, test_size

len(train_data), len(test_data)

# convert an array of values into a dataset matrix
def create_dataset(dataset, time_step=1):
	dataX, dataY = [], []
	for i in range(len(dataset)-time_step-1):
		a = dataset[i:(i+time_step), 0]
		dataX.append(a)
		dataY.append(dataset[i + time_step, 0])
	return np.array(dataX), np.array(dataY)

# reshape into X=t,t+1,t+2,t+3 and Y=t+4
time_step = 100
X_train, y_train = create_dataset(train_data, time_step)
X_test, ytest = create_dataset(test_data, time_step)
print(X_train.shape), print(y_train.shape)
print(X_test.shape), print(ytest.shape)

# reshape input to be [samples, time steps, features] which is required for LSTM
X_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)

### Create the Stacked LSTM model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(50,return_sequences=True))     # Because this is STACKED LSTM (one LSTM over another)
model.add(LSTM(50))                           # Because this is STACKED LSTM
model.add(Dense(1))                           # Final output
model.compile(loss='mean_squared_error',optimizer='adam')

model.summary()

model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)

import tensorflow as tf
print(tf.__version__)

### Lets Do the prediction and check performance metrics
train_predict=model.predict(X_train)
test_predict=model.predict(X_test)

##Transformback to original form
train_predict=scaler.inverse_transform(train_predict)
test_predict=scaler.inverse_transform(test_predict)

### Calculate RMSE performance metrics
import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(y_train,train_predict))

### Test Data RMSE
math.sqrt(mean_squared_error(ytest,test_predict))

### Plotting 
# shift train predictions for plotting
look_back=100
trainPredictPlot = np.empty_like(df1)
trainPredictPlot[:, :] = np.nan
trainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict
# shift test predictions for plotting
testPredictPlot = np.empty_like(df1)
testPredictPlot[:, :] = np.nan
testPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict
# plot baseline and predictions
plt.plot(scaler.inverse_transform(df1))
plt.plot(trainPredictPlot)
plt.plot(testPredictPlot)
plt.show()

len(test_data)

temp = len(test_data)-100
temp

x_input=test_data[temp:].reshape(1,-1)
x_input.shape

temp_input=list(x_input)
temp_input=temp_input[0].tolist()

# temp_input

# demonstrate prediction for next 10 days
from numpy import array

lst_output=[]
n_steps=100
i=0
while(i<30):
    
    if(len(temp_input)>100):
        #print(temp_input)
        x_input=np.array(temp_input[1:])
        #print("{} day input {}".format(i,x_input))
        x_input=x_input.reshape(1,-1)
        x_input = x_input.reshape((1, n_steps, 1))
        #print(x_input)
        yhat = model.predict(x_input, verbose=0)
        print("{} day output {}".format(i,yhat))
        temp_input.extend(yhat[0].tolist())
        temp_input=temp_input[1:]
        #print(temp_input)
        lst_output.extend(yhat.tolist())
        i=i+1
    else:
        x_input = x_input.reshape((1, n_steps,1))
        yhat = model.predict(x_input, verbose=0)
        #print(yhat[0])
        temp_input.extend(yhat[0].tolist())
        print(len(temp_input))
        lst_output.extend(yhat.tolist())
        i=i+1

day_new=np.arange(1,101)
day_pred=np.arange(101,131)

len(df1)

graph_index = len(df1)
graph_index -= 100
graph_index

plt.plot(day_new,scaler.inverse_transform(df1[graph_index:]))     # The last 100 days that we considered (Original values)
plt.plot(day_pred,scaler.inverse_transform(lst_output))           # Our predicted values (Predicted values)

df3 = df1.tolist()
df3.extend(lst_output)        # Total 2069+30=2099
plt.plot(df3[1500:])          # 2069-1500=569 |||| 569+30=599

df3=scaler.inverse_transform(df3).tolist()
plt.plot(df3)
